{"type":"entity","name":"dillapoe2stat","entityType":"project","observations":["Path of Exile 2 farming tracker with phase-based architecture","Tech stack: Python 3.10+, Windows-only, uses keyboard and win11toast","Main entry point: poe_stats_refactored_v2.py","Current version: v0.3.5-dev on develop branch, v0.3.4 on main"]}
{"type":"entity","name":"phase_based_architecture","entityType":"core_pattern","observations":["MapFlowController with explicit sequential phases prevents double-counting bugs","PRE-map: 4 phases (Snapshot, Parse, Update State, Notify)","POST-map: 9 phases with Phase 4 capturing session BEFORE Phase 5 updates","CRITICAL: Only Phase 5 (_phase_update_post_state) can call session.add_completed_map()","Phase 4 must capture session baseline before Phase 5 for accurate notifications"]}
{"type":"entity","name":"user_dilla","entityType":"user","observations":["Prefers German comments in code where appropriate","Uses Git Bash for gitmoji commits due to PowerShell UTF-8 encoding issues","Works on develop branch for daily development, merges to main only for releases","Has Obsidian vault at C:\\Users\\dilla\\Documents\\Obsidian\\DillaPC\\000 Inbox\\dillapoe2stat"]}
{"type":"entity","name":"security_practices","entityType":"security","observations":["API credentials stored in credentials.txt (3 lines: CLIENT_ID, CLIENT_SECRET, character name)","credentials.txt is in .gitignore and NEVER committed to Git","If CLIENT_SECRET accidentally exposed: user must regenerate API key, don't rewrite Git history","runs.jsonl and sessions.jsonl excluded from Git (local data only)",".vscode/mcp.json is in .gitignore (contains private local paths like Obsidian vault)",".vscode/memory.json is NOT in .gitignore (project knowledge, synced via Git)"]}
{"type":"entity","name":"git_workflow","entityType":"workflow","observations":["Two-branch strategy: main (stable, tagged releases) and develop (active development)","PowerShell strips UTF-8 emojis when passing to Git","Solution: Use Git Bash with printf and hex-encoded UTF-8 bytes for gitmoji","Example: printf 'type: \\xF0\\x9F\\x93\\x9D Description' for üìù memo emoji","Common hex codes: üìù=\\xF0\\x9F\\x93\\x9D, ‚ú®=\\xE2\\x9C\\xA8, üêõ=\\xF0\\x9F\\x90\\x9B"]}
{"type":"entity","name":"future_features","entityType":"roadmap","observations":["WebOverlay template system rework (like notification_templates.py)","Waystone intelligence with mod parsing and scoring","PySide6 native overlay (planned for v0.4.0)","Remove DualSense controller code (not needed)","OBS rename to WebOverlay (major refactor pending)"]}
{"type":"entity","name":"kiss_overlay","entityType":"feature","observations":["File-based IPC overlay system with zero threading issues","Standalone Tkinter process polls kiss_overlay_state.json every 500ms","Win32 API: Always-on-top (HWND_TOPMOST) and click-through (WS_EX_TRANSPARENT)","Hotkeys: F10 (visibility toggle), Shift+F10 (click-through toggle)","Position saved to kiss_overlay_position.json on exit","Signal handler for clean Ctrl+C shutdown without Tkinter exceptions","State file: kiss_overlay/kiss_overlay_state.json (relative to project root)","Standalone script auto-detects state file in same directory as script","Templates must use single-line format with \\n (never triple-quote multi-line)","kiss_overlay_templates.py: SECTION_* for reusable parts, TEMPLATE_* for phase-specific","get_template_for_phase() dispatcher uses phase KEY (pre_notify, post_reset) for logic"]}
{"type":"entity","name":"overlay_template_system","entityType":"architecture","observations":["Reuses same 40+ template variables as notification system (zero duplication)","Phase-specific templates: TEMPLATE_PRE_NOTIFY, TEMPLATE_POST_RESET, TEMPLATE_POST_UPDATE_SESSION","Templates use {phase_name} variable for dynamic display names","Display names centralized in PHASE_DISPLAY_NAMES dict (kiss_overlay_state_writer.py)","Phase keys (pre_notify, post_reset) stable for API, display names flexible","Most visible phases: 'IN MAP üó∫Ô∏è' (during map) and 'MAP COMPLETE ‚úÖ' (after map)","Template dispatcher uses phase KEY for logic, phase_name only for display"]}
{"type":"entity","name":"overlay_session_oct8_2025","entityType":"session_notes","observations":["Fixed path mismatch: standalone now uses script directory via os.path.abspath(__file__)","Removed atexit for position save, now saves in signal_handler and WM_DELETE_WINDOW","Added signal.SIGINT handler to prevent Tkinter KeyboardInterrupt exceptions","Keyboard hooks cleaned up in finally block for all exit paths","Changed display names: PRE-4 from 'Notify' to 'IN MAP üó∫Ô∏è', POST-9 from 'Reset' to 'MAP COMPLETE ‚úÖ'","Templates refactored to use {phase_name} instead of hardcoded text","Two commits: feat (path fixes + templates) and refactor (dynamic phase_name)","Configured project-specific memory storage in .vscode/memory.json using ${workspaceFolder} variable","Discovered MCP Memory uses MEMORY_FILE_PATH environment variable for storage location","Configured ${workspaceFolder} variable in .vscode/mcp.json to create project-local .vscode/memory.json","Memory now syncs between home and office via Git (only memory.json, not mcp.json)","Successfully migrated all 9 entities and 4 relations from global to project-local memory storage"]}
{"type":"entity","name":"mcp_memory_setup","entityType":"configuration","observations":["MCP Memory Server uses MEMORY_FILE_PATH environment variable to set storage location","VS Code MCP config supports ${workspaceFolder} variable for project-relative paths","Configuration in .vscode/mcp.json: MEMORY_FILE_PATH = '${workspaceFolder}/.vscode/memory.json'","Each project has its own memory.json, synced via Git across machines","mcp.json stays local (contains private paths), memory.json is shared (project knowledge)"]}
{"type":"entity","name":"Gitmoji Commit Workflow","entityType":"core_pattern","observations":["CRITICAL RULE: Every commit MUST have gitmoji emoji - NO EXCEPTIONS","PowerShell strips UTF-8 emojis before Git receives them - this is a Windows limitation","ALWAYS use Git Bash with printf and hex-encoded UTF-8 bytes for commits","Command pattern: & \"C:\\Program Files\\Git\\bin\\bash.exe\" -c \"cd /c/temp/dillapoe2stat && printf 'type: \\xE2\\x9C\\xA8 Description\\n\\n- Detail\\n' > commit_msg.txt && git commit -F commit_msg.txt && rm commit_msg.txt\"","Common hex codes: ‚ú® feat (\\xE2\\x9C\\xA8), üêõ fix (\\xF0\\x9F\\x90\\x9B), üìù docs (\\xF0\\x9F\\x93\\x9D), üîß chore (\\xF0\\x9F\\x94\\xA7), üöÄ perf (\\xF0\\x9F\\x9A\\x80)","If gitmoji forgotten: STOP, git reset --soft HEAD~1, re-commit with gitmoji","Instructions moved to TOP of copilot-instructions.md (line 11) for visibility","Also enforced in .copilot-commit-message-instructions.md with WARNING at top","This mistake happens repeatedly - instructions must be checked BEFORE every commit"]}
{"type":"entity","name":"OAuth 2.1 Migration","entityType":"feature","observations":["Implemented in v0.4.0 released 2025-10-22","Complete replacement of deprecated client_credentials OAuth flow","Uses Authorization Code Grant with PKCE (Proof Key for Code Exchange)","Public Client configuration - no client_secret required","Browser-based authorization with automatic callback handling on port 8080","Token lifetimes: 10h access tokens, 7d refresh tokens","Automatic token refresh before expiration","Tokens stored in tokens.json (gitignored)","User-Agent header required on all requests to prevent Cloudflare 403","Implementation in oauth_flow.py module (400 lines)","Components: PKCEGenerator, CallbackHandler, OAuthFlow, TokenManager","First run opens browser automatically for authorization","Shows normal warning 'We cannot verify this request' (expected for all Public Clients)","User confirmed working: Authorization code received ‚Üí Token exchange successful ‚Üí Tracker initialized"]}
{"type":"entity","name":"oauth_flow.py","entityType":"architecture","observations":["New module created in v0.4.0","400 lines of OAuth 2.1 implementation","PKCEGenerator class: Creates 32-byte code_verifier and SHA256 code_challenge","CallbackHandler class: HTTP server receives authorization codes","OAuthFlow class: Browser authorization orchestration","TokenManager class: Token storage, loading, auto-refresh logic","get_access_token() convenience function for automatic flow","User-Agent header added to prevent Cloudflare blocking","Handles token exchange and refresh token flows","Thread-safe callback server on port 8080"]}
{"type":"entity","name":"PKCE Security","entityType":"core_pattern","observations":["Proof Key for Code Exchange","Prevents authorization code interception attacks","Required for OAuth 2.1 Public Clients","32-byte random code_verifier (base64url encoded)","SHA256 code_challenge derived from code_verifier","Challenge sent to authorization, verifier sent to token exchange","Ensures only the app that started the flow can complete it"]}
{"type":"relation","from":"phase_based_architecture","to":"dillapoe2stat","relationType":"is_core_pattern_of"}
{"type":"relation","from":"kiss_overlay","to":"dillapoe2stat","relationType":"is_feature_of"}
{"type":"relation","from":"overlay_template_system","to":"kiss_overlay","relationType":"powers"}
{"type":"relation","from":"overlay_session_oct8_2025","to":"kiss_overlay","relationType":"documents_work_on"}
{"type":"relation","from":"mcp_memory_setup","to":"dillapoe2stat","relationType":"enables_sync_for"}
{"type":"relation","from":"Gitmoji Commit Workflow","to":"DillaPoE2Stat","relationType":"is_core_pattern_of"}
{"type":"relation","from":"OAuth 2.1 Migration","to":"DillaPoE2Stat","relationType":"is_feature_of"}
{"type":"relation","from":"OAuth 2.1 Migration","to":"oauth_flow.py","relationType":"implemented_in"}
{"type":"relation","from":"PKCE Security","to":"OAuth 2.1 Migration","relationType":"secures"}