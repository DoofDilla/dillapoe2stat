name: Sync Wiki

on:
  push:
    branches:
      - main
    paths:
      - 'docs/wiki/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mirror docs/wiki to GitHub Wiki
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail

          if [ -z "${GITHUB_TOKEN}" ]; then
            echo "GITHUB_TOKEN is required"
            exit 1
          fi

          workdir="$(mktemp -d)"
          rsync -a --delete "docs/wiki/" "$workdir/"
          cd "$workdir"

          if [ ! -f Home.md ]; then
            cat <<'EHOME' > Home.md
# Home

This page was auto-generated by the wiki sync workflow because no Home.md file was present in docs/wiki/.
EHOME
          fi

          git init
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add --all

          if git diff --cached --quiet; then
            echo "No wiki content to sync."
            exit 0
          fi

          git commit -m "Sync wiki from docs/wiki"

          remote_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${REPOSITORY}.wiki.git"
          git remote add origin "$remote_url"

          default_branch="main"
          existing_branches="$(git ls-remote --heads "$remote_url" main master || true)"
          if echo "$existing_branches" | grep -q 'refs/heads/main'; then
            default_branch="main"
          elif echo "$existing_branches" | grep -q 'refs/heads/master'; then
            default_branch="master"
          fi

          if echo "$existing_branches" | grep -q "refs/heads/$default_branch"; then
            git fetch origin "$default_branch"
            if git diff --quiet HEAD "origin/$default_branch"; then
              echo "Wiki already up to date; nothing to push."
              exit 0
            fi
          fi

          set +e
          git push --force origin HEAD:"$default_branch"
          status=$?
          if [ $status -ne 0 ]; then
            if [ "$default_branch" = "main" ]; then
              fallback_branch="master"
            else
              fallback_branch="main"
            fi
            echo "Primary push to $default_branch failed; attempting $fallback_branch."
            git push --force origin HEAD:"$fallback_branch"
            status=$?
          fi
          set -e

          exit $status
